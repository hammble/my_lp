import requests
import vk_api
import time
import datetime
import asyncio
import re
import aiohttp
from vkbottle.user import User, Message
from vkbottle.bot import Bot, Message
from vkbottle.api import API
from collections import OrderedDict
from bs4 import BeautifulSoup
import asyncio
import os
import json
import pyowm
import random
from pyowm import OWM
from loguru import logger
import colored
from colored import stylize

owm = pyowm.OWM('–¢–û–ö–ï–ù open weather api')
mgr = owm.weather_manager()
api = API('–¢–û–ö–ï–ù')
token = '–¢–û–ö–ï–ù'
user = User('–¢–û–ö–ï–ù')
bot = Bot('–¢–û–ö–ï–ù')
TEMPLATES_FILE = 'temps.json'
vk_session = vk_api.VkApi(token=token)
vk = vk_session.get_api()
timers = {}
ignored_users = {}
timer_counter = 0
owners = [] # YOUR USER ID
dov = []
prefixes = [''] # PREFIXES
logger.disable('vkbottle') #–í—ã–∫–ª—é—á–∞–µ—Ç –º—É—Å–æ—Ä —Å –∫–æ–Ω—Å–æ–ª–∏

status_translation = {
    'clear sky': '—è—Å–Ω–æ–µ –Ω–µ–±–æ',
    'few clouds': '–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',
    'scattered clouds': '—Ä–∞—Å—Å–µ—è–Ω–Ω—ã–µ –æ–±–ª–∞–∫–∞',
    'broken clouds': '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏',
    'overcast clouds': '–ø–∞—Å–º—É—Ä–Ω–æ',
    'shower rain': '–ª–∏–≤–µ–Ω—å',
    'rain': '–¥–æ–∂–¥—å',
    'thunderstorm': '–≥—Ä–æ–∑–∞',
    'snow': '—Å–Ω–µ–≥',
    'light snow': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥',  
    'mist': '—Ç—É–º–∞–Ω'
}

status_emojis = {
    '—è—Å–Ω–æ–µ –Ω–µ–±–æ': '‚òÄÔ∏è',
    '–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å': 'üå§Ô∏è',
    '—Ä–∞—Å—Å–µ—è–Ω–Ω—ã–µ –æ–±–ª–∞–∫–∞': '‚õÖ',
    '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏': 'üå•Ô∏è',
    '–ø–∞—Å–º—É—Ä–Ω–æ': '‚òÅÔ∏è',
    '–ª–∏–≤–µ–Ω—å': 'üåßÔ∏è',
    '–¥–æ–∂–¥—å': 'üåßÔ∏è',
    '–≥—Ä–æ–∑–∞': '‚õàÔ∏è',
    '—Å–Ω–µ–≥': '‚ùÑÔ∏è',
    '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥': 'üå®Ô∏è',  
    '—Ç—É–º–∞–Ω': 'üå´Ô∏è'
}

DD_SCRIPT = (
    'var i = 0;var msg_ids = [];var count = %d;'
    'var items = API.messages.getHistory({"peer_id":%d,"count":"200", "offset":"0"}).items;'
    'while (count > 0 && i < items.length) {if (items[i].out == 1) {if (items[i].id == %d) {'
    'if (items[i].reply_message) {msg_ids.push(items[i].id);msg_ids.push(items[i].reply_message.id);'
    'count = 0;};if (items[i].fwd_messages) {msg_ids.push(items[i].id);var j = 0;while (j < '
    'items[i].fwd_messages.length) {msg_ids.push(items[i].fwd_messages[j].id);j = j + 1;};count = 0;};};'
    'msg_ids.push(items[i].id);count = count - 1;};if ((%d - items[i].date) > 86400) {count = 0;};i = i + 1;};'
    'API.messages.delete({"message_ids": msg_ids,"delete_for_all":"1"});return count;'
)

if not os.path.exists(TEMPLATES_FILE):
    with open(TEMPLATES_FILE, 'w') as f:
        json.dump({}, f)

async def edit_message(message: Message,text: str = '',att: str = ''):
    return await message.ctx_api.messages.edit(peer_id=message.peer_id, message=text,message_id=message.id, keep_forward_messages=True,keep_snippets=True,dont_parse_links=False,attachment=att)

def get_user_id_by_domain(user_domain: str):
    vk = vk_api.VkApi(token=token)
    obj = vk.method('utils.resolveScreenName', {"screen_name": user_domain})
    if isinstance(obj, list):
        return
    if obj['type'] == 'user':
        return obj["object_id"]

async def send_text_after_period(message: Message, period_seconds: int, text: str):
    await asyncio.sleep(period_seconds)
    await message.answer(text)

def get_user_id(text):
    result = []
    regex = r"(?:vk\.com\/(?P<user>[\w\.]+))|(?:\[id(?P<user_id>[\d]+)\|)"
    for user_domain, user_id in re.findall(regex, text):
        if user_domain:
            result.append(get_user_id_by_domain(user_domain))
        if user_id:
            result.append(int(user_id))
    _result = []
    for r in result:
        if r is not None:
            _result.append(r)
    return _result

async def user_id_get_mes(message: Message):
    if message.reply_message == None:
        vk_user = message.from_id
    else:
        vk_user = message.reply_message.from_id
    return vk_user

@user.on.message(text='<q>')
async def logger(message: Message, q: str):
  user_id = message.from_id
  a = await message.get_user(user_ids=user_id)
  name = f'{a.first_name} {a.last_name}'
  current_time = datetime.datetime.now().strftime('%H:%M:%S')
  current_time = stylize(current_time, colored.fg("cyan"))
  name = stylize(name, colored.fg("red"))
  q = stylize(q, colored.fg("cyan"))
  print(f'[{current_time}] | [{name}] | [{q}]')

@user.on.message(text=[f'{prefix}–∏–¥' for prefix in prefixes])
async def getid(message: Message):
  user_id = await user_id_get_mes(message)
  if message.from_id not in owners:
    print('')
    return
  await edit_message(message, f'ID [id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]: {user_id}')

@user.on.message(text=[f'{prefix}–∏–¥ <link>' for prefix in prefixes])
async def ejdj(message: Message, link: str):
  user_id = get_user_id(link)[0]
  if message.from_id not in owners:
    print('')
    return
  await edit_message(message, f'ID [id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]: {user_id}')

@user.on.message(text=[f'{prefix}–ø–∏–Ω–≥' for prefix in prefixes])
async def ping(message: Message):
    if message.from_id not in owners:
        print('')
        return
    delta = round(time.time() - message.date, 2)
    text = f'üèì –ü–æ–Ω–≥! –ó–∞–¥–µ—Ä–∂–∫–∞: {delta}—Å.'
    await edit_message(message, text)

@user.on.message(text=[f'{prefix}+–¥—Ä' for prefix in prefixes])
async def greeting(message: Message):
    if message.from_id not in owners:
        print('')
        return
    user_id = await user_id_get_mes(message=message)
    if user_id == message.from_id:
        await edit_message(message, "‚ùå –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–µ–±—è –≤ –¥—Ä—É–∑—å—è!")
        return
    await message.ctx_api.friends.add(user_id)
    a = await message.get_user(user_ids=user_id)
    name = f'[id{a.id}|{a.first_name} {a.last_name}]'
    text = f'‚úÖ {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–∑—å—è.'
    await edit_message(message, text)

@user.on.message(text=[f'{prefix}+–¥—Ä <url>' for prefix in prefixes])
async def greeting(message: Message, url: str):
    if message.from_id not in owners:
        print('')
        return
    user_id = get_user_id(url)[0]
    if user_id == message.from_id:
        await edit_message(message, "‚ùå –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–µ–±—è –≤ –¥—Ä—É–∑—å—è!")
        return
    await message.ctx_api.friends.add(user_id)
    a = await message.get_user(user_ids=user_id)
    name = f'[id{a.id}|{a.first_name} {a.last_name}]'
    text = f'‚úÖ {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–∑—å—è.'
    await edit_message(message, text)

@user.on.message(text=[f'{prefix}-–¥—Ä' for prefix in prefixes])
async def greeting(message: Message):
    if message.from_id not in owners:
        print('')
        return
    user_id = await user_id_get_mes(message=message)
    if user_id == message.from_id:
        await edit_message(message, "‚ùå –ù–µ —É–¥–∞–ª—è–π—Ç–µ —Å–µ–±—è –∏–∑ –¥—Ä—É–∑–µ–π!")
        return
    await message.ctx_api.friends.delete(user_id)
    a = await message.get_user(user_ids=user_id)
    name = f'[id{a.id}|{a.first_name} {a.last_name}]'
    text = f'‚úÖ {name} —É–¥–∞–ª—ë–Ω –∏–∑ –¥—Ä—É–∑–µ–π.'
    await edit_message(message, text)

@user.on.message(text=[f'{prefix}-–¥—Ä <url>' for prefix in prefixes])
async def greeting(message: Message, url: str):
    if message.from_id not in owners:
        print('')
        return
    user_id = get_user_id(url)[0]
    if user_id == message.from_id:
        await edit_message(message, "‚ùå –ù–µ —É–¥–∞–ª—è–π—Ç–µ —Å–µ–±—è –∏–∑ –¥—Ä—É–∑–µ–π!")
        return
    await message.ctx_api.friends.delete(user_id)
    a = await message.get_user(user_ids=user_id)
    name = f'[id{a.id}|{a.first_name} {a.last_name}]'
    text = f'‚úÖ {name} —É–¥–∞–ª—ë–Ω –∏–∑ –¥—Ä—É–∑–µ–π.'
    await edit_message(message, text)

@user.on.message(text=[f'{prefix}–¥–æ–±–∞–≤–∏—Ç—å' for prefix in prefixes])
async def greeting(message: Message):
    if message.from_id not in owners:
        print('')
        return
    try:
        user_id = await user_id_get_mes(message)
        if user_id == message.from_id:
            await edit_message(message, "‚ùå –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–µ–±—è –≤ —á–∞—Ç!")
            return
        await message.ctx_api.request("messages.addChatUser", {"user_id": user_id,"chat_id": message.peer_id - 2000000000})
        text = '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç.'
        await edit_message(message, text)
    except Exception as ex:
        await edit_message(message, f"–û—à–∏–±–∫–∞: {ex}")

@user.on.message(text=[f'{prefix}–¥–æ–±–∞–≤–∏—Ç—å <url>' for prefix in prefixes])
async def greeting(message: Message, url: str):
    if message.from_id not in owners:
        print('')
        return
    try:
        user_id = get_user_id(url)[0]
        if user_id == message.from_id:
            await edit_message(message, "‚ùå –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–µ–±—è –≤ —á–∞—Ç!")
            return
        await message.ctx_api.request("messages.addChatUser", {"user_id": user_id,"chat_id": message.peer_id - 2000000000})
        text = '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç.'
        await edit_message(message, text)
    except Exception as ex:
        await edit_message(message, f"–û—à–∏–±–∫–∞: {ex}")

@user.on.message(text=[f'{prefix}+–∞–¥–º–∏–Ω' for prefix in prefixes])
async def greeting(message: Message):
    if message.from_id not in owners:
        print('')
        return
    try:
        user_id = await user_id_get_mes(message)
        if user_id == message.from_id:
            await edit_message(message, "‚ùå –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–µ–±—è –≤ –∞–¥–º–∏–Ω—ã!")
            return
        await message.ctx_api.request("messages.setMemberRole",
                                      {"peer_id": message.peer_id, "member_id": user_id, "role": "admin"})
        text = f"‚úÖ [id{user_id}|–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–¥–∞–Ω—ã.]"
        await edit_message(message, text)
    except Exception as ex:
        await edit_message(message, f'–û—à–∏–±–∫–∞: {ex}')

@user.on.message(text=[f'{prefix}+–∞–¥–º–∏–Ω <url>' for prefix in prefixes])
async def greeting(message: Message, url: str):
    if message.from_id not in owners:
        print('')
        return
    try:
        user_id = get_user_id(url)[0]
        if user_id == message.from_id:
            await edit_message(message, "‚ùå –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–µ–±—è –≤ –∞–¥–º–∏–Ω—ã!")
            return
        await message.ctx_api.request("messages.setMemberRole",
                                      {"peer_id": message.peer_id, "member_id": user_id, "role": "admin"})
        text = f"‚úÖ [id{user_id}|–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–¥–∞–Ω—ã.]"
        await edit_message(message, text)
    except Exception as ex:
        await edit_message(message, f'–û—à–∏–±–∫–∞: {ex}')

@user.on.message(text=[f'{prefix}-–∞–¥–º–∏–Ω' for prefix in prefixes])
async def greeting(message: Message):
    if message.from_id not in owners:
        print('')
        return
    try:
        user_id = await user_id_get_mes(message)
        if user_id == message.from_id:
            await edit_message(message, "‚ùå –ù–µ —É–¥–∞–ª—è–π—Ç–µ —Å–µ–±—è –∏–∑ –∞–¥–º–∏–Ω–æ–≤!")
            return
        await message.ctx_api.request("messages.setMemberRole",
                                      {"peer_id": message.peer_id, "member_id": user_id, "role": "member"})
        text = f"‚úÖ –° [id{user_id}|–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–Ω—è—Ç—ã.]"
        await edit_message(message, text)
    except Exception as ex:
        await edit_message(message, f"–û—à–∏–±–∫–∞: {ex}")

@user.on.message(text=[f'{prefix}-–∞–¥–º–∏–Ω <url>' for prefix in prefixes])
async def greeting(message: Message, url: str):
    if message.from_id not in owners:
        print('')
        return
    try:
        user_id = get_user_id(url)[0]
        if user_id == message.from_id:
            await edit_message(message, "‚ùå –ù–µ —É–¥–∞–ª—è–π—Ç–µ —Å–µ–±—è –∏–∑ –∞–¥–º–∏–Ω–æ–≤!")
            return
        await message.ctx_api.request("messages.setMemberRole",
                                      {"peer_id": message.peer_id, "member_id": user_id, "role": "member"})
        text = f"‚úÖ –° [id{user_id}|–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–Ω—è—Ç—ã.]"
        await edit_message(message, text)
    except Exception as ex:
        await edit_message(message, f"–û—à–∏–±–∫–∞: {ex}")

@user.on.message(text=[f'{prefix}–∫–∏–∫' for prefix in prefixes])
async def greeting(message: Message):
    if message.from_id not in owners:
        print('')
        return
    try:
        user_id = await user_id_get_mes(message)
        if user_id == message.from_id:
            await edit_message(message, "‚ùå –ù–µ –∫–∏–∫–∞–π—Ç–µ —Å–µ–±—è!")
            return
        await message.ctx_api.request("messages.removeChatUser", {"member_id": user_id,
                                                                  "chat_id": message.peer_id - 2000000000})
        text = f"‚úÖ –ò—Å–∫–ª—é—á–µ–Ω —Å –±–µ—Å–µ–¥—ã."
        await edit_message(message, text)
    except Exception as ex:
        await edit_message(message, f'–û—à–∏–±–∫–∞: {ex}')

@user.on.message(text=[f'{prefix}–∫–∏–∫ <url>' for prefix in prefixes])
async def greeting(message: Message, url: str):
    if message.from_id not in owners:
        print('')
        return
    try:
        user_id = get_user_id(url)[0]
        if user_id == message.from_id:
            await edit_message(message, "‚ùå –ù–µ –∫–∏–∫–∞–π—Ç–µ —Å–µ–±—è!")
            return
        await message.ctx_api.request("messages.removeChatUser", {"member_id": user_id,"chat_id": message.peer_id - 2000000000})
        text = f"‚úÖ –ò—Å–∫–ª—é—á–µ–Ω —Å –±–µ—Å–µ–¥—ã."
        await edit_message(message, text)
    except Exception as ex:
        await edit_message(message, f'–û—à–∏–±–∫–∞: {ex}')

@user.on.message(text=[f'{prefix}–≤—ã–π—Ç–∏' for prefix in prefixes])
async def greeting(message: Message):
    if message.from_id not in owners:
        print('')
        return
    text = f"‚úÖ –ü–æ–∫–∏–Ω—É–ª –±–µ—Å–µ–¥—É"
    await edit_message(message, text)
    await message.ctx_api.request("messages.removeChatUser", {"member_id": message.from_id,"chat_id": message.peer_id - 2000000000})

@user.on.message(text=[f'{prefix}+—á—Å' for prefix in prefixes])
async def greeting(message: Message):
    if message.from_id not in owners:
        print('')
        return
    user_id = await user_id_get_mes(message)
    if user_id == message.from_id:
        await edit_message(message, "‚ùå –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–µ–±—è –≤ —á—Å!")
        return
    a = await message.get_user(user_ids=user_id)
    name = f'[id{a.id}|{a.first_name} {a.last_name}]'
    await message.ctx_api.account.ban(user_id)
    await edit_message(message, f'‚úÖ {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ß–°')

@user.on.message(text=[f'{prefix}+—á—Å <url>' for prefix in prefixes])
async def greeting(message: Message, url: str):
    if message.from_id not in owners:
        print('')
        return
    user_id = get_user_id(url)[0]
    if user_id == message.from_id:
        await edit_message(message, "‚ùå –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–µ–±—è –≤ —á—Å!")
        return
    a = await message.get_user(user_ids=user_id)
    name = f'[id{a.id}|{a.first_name} {a.last_name}]'
    await message.ctx_api.account.ban(user_id)
    await edit_message(message, f'‚úÖ {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ß–°')

@user.on.message(text=[f'{prefix}-—á—Å' for prefix in prefixes])
async def greeting(message: Message):
    if message.from_id not in owners:
        print('')
        return
    user_id = await user_id_get_mes(message)
    if user_id == message.from_id:
        await edit_message(message, "‚ùå –ù–µ —É–¥–∞–ª—è–π—Ç–µ —Å–µ–±—è –∏–∑ –ß–°!")
        return
    a = await message.get_user(user_ids=user_id)
    name = f'[id{a.id}|{a.first_name} {a.last_name}]'
    await message.ctx_api.account.unban(user_id)
    await edit_message(message, f'‚úÖ {name} —É–¥–∞–ª–µ–Ω –∏–∑ –ß–°')

@user.on.message(text=[f'{prefix}-—á—Å <url>' for prefix in prefixes])
async def greeting(message: Message, url: str):
    if message.from_id not in owners:
        print('')
        return
    user_id = get_user_id(url)[0]
    if user_id == message.from_id:
        await edit_message(message, "‚ùå –ù–µ —É–¥–∞–ª—è–π—Ç–µ —Å–µ–±—è –∏–∑ –ß–°!")
        return
    a = await message.get_user(user_ids=user_id)
    name = f'[id{a.id}|{a.first_name} {a.last_name}]'
    await message.ctx_api.account.unban(user_id)
    await edit_message(message, f'‚úÖ {name} —É–¥–∞–ª–µ–Ω –∏–∑ –ß–°')

@user.on.message(text=[f'{prefix}–≤–ª—Å\n<text>' for prefix in prefixes])
async def greeting(message: Message, text: str):
    if message.from_id not in owners:
        print('')
        return
    user_id = await user_id_get_mes(message)
    print(user_id)
    await message.ctx_api.request("messages.send", {"peer_id": user_id, "message": text, "random_id": 0})
    tt = '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.'
    await edit_message(message, tt)

@user.on.message(text=[f'{prefix}–≤–ª—Å <url>\n<text>' for prefix in prefixes])
async def greeting(message: Message, url: str, text: str):
    if message.from_id not in owners:
        print('')
        return
    user_id = get_user_id(url)[0]
    print(user_id)
    await message.ctx_api.request("messages.send", {"peer_id": user_id, "message": text, "random_id": 0})
    tt = '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.'
    await edit_message(message, tt)

@user.on.message(text=[f'{prefix}+—à–∞–± <name>\n<text>' for prefix in prefixes])
async def add_template(message: Message, name: str, text: str):
    if message.from_id not in owners:
        return
    else:
        with open(TEMPLATES_FILE, 'r') as f:
            templates = json.load(f)
        templates[name] = text
        with open(TEMPLATES_FILE, 'w') as f:
            json.dump(templates, f)
        await edit_message(message=message, text=f"‚úÖ –®–∞–±–ª–æ–Ω ¬´{name}¬ª —Å–æ–∑–¥–∞–Ω.")

@user.on.message(text=[f'{prefix}-—à–∞–± <name>' for prefix in prefixes])
async def delete_template(message: Message, name: str):
    if message.from_id not in owners:
        return
    else:
        with open(TEMPLATES_FILE, 'r') as f:
            templates = json.load(f)
        if name in templates:
            del templates[name]
            with open(TEMPLATES_FILE, 'w') as f:
                json.dump(templates, f)
            await edit_message(message=message, text=f"‚úÖ –®–∞–±–ª–æ–Ω ¬´{name}¬ª —É–¥–∞–ª–µ–Ω.")
        else:
            await edit_message(message=message, text=f"‚ùå –®–∞–±–ª–æ–Ω ¬´{name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@user.on.message(text=[f'{prefix}~—à–∞–± <name>\n<new_text>' for prefix in prefixes])
async def edit_template(message: Message, name: str, new_text: str):
    if message.from_id not in owners:
        return
    else:
        with open(TEMPLATES_FILE, 'r') as f:
            templates = json.load(f)
        if name in templates:
            templates[name] = new_text
            with open(TEMPLATES_FILE, 'w') as f:
                json.dump(templates, f)
            await edit_message(message=message, text=f"‚úÖ –¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ ¬´{name}¬ª –∏–∑–º–µ–Ω–µ–Ω.")
        else:
            await edit_message(message=message, text=f"‚ùå –®–∞–±–ª–æ–Ω ¬´{name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@user.on.message(text=[f'{prefix}—à–∞–±—ã' for prefix in prefixes])
async def list_templates(message: Message):
    if message.from_id not in owners:
        return
    else:
        with open(TEMPLATES_FILE, 'r') as f:
            template_names = json.load(f, object_pairs_hook=OrderedDict)
        if template_names:
            template_list = "\n".join(f"{i+1}. {name}" for i, name in enumerate(template_names))
            await edit_message(message=message, text=f"üìñ –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤:\n{template_list}")
        else:
            await edit_message(message=message, text="üìñ –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø—É—Å—Ç.")

@user.on.message(text=[f'{prefix}—à–∞–± <name>' for prefix in prefixes])
async def use_template(message: Message, name: str):
    if message.from_id not in owners:
        return
    else:
        with open(TEMPLATES_FILE, 'r') as f:
            templates = json.load(f)

        if name in templates:
            template_text = templates[name]
            await edit_message(message=message, text=f"{template_text}")
        else:
            await edit_message(message=message, text=f"‚ùå –®–∞–±–ª–æ–Ω ¬´{name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@user.on.message(text=[f'{prefix}–ø–æ–≥–æ–¥–∞ <city>' for prefix in prefixes])
async def weather_info(message: Message, city: str):
    if message.from_id not in owners:
        return
    observation = mgr.weather_at_place(city)
    w = observation.weather
    temperature = w.temperature('celsius')["temp"]
    wind = w.wind()["speed"]
    humidity = w.humidity
    status = w.detailed_status.lower()
    translated_status = status_translation.get(status, status)
    emoji = status_emojis.get(translated_status, '')
    response = (
        f"üìù –ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ ¬´{city}¬ª:\n\n"
        f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
        f"üå™Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind} –º/—Å\n"
        f"ü´ß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
        f"{emoji}–°—Ç–∞—Ç—É—Å: {translated_status}"
    )
    await edit_message(message, response)

@user.on.message(text=[f'{prefix}—Ä–µ—à–∏ <equation>' for prefix in prefixes])
async def solve_equation(message: Message, equation: str):
    if message.from_id not in owners:
        return
    try:
        result = eval(equation)
        await edit_message(message, text=f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except Exception as e:
        error_message = f"‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞."
        await edit_message(message, error_message)

@user.on.message(text=[f'{prefix}+—Ç–∞–π–º–µ—Ä <minutes:int>\n<text>' for prefix in prefixes])
async def set_timer(message: Message, minutes: int, text: str):
    if message.from_id not in owners:
        return
    try:
        global timer_counter
        response = "‚åö –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        await edit_message(message, response)
        timer_counter += 1
        timer_id = timer_counter
        timers[timer_id] = {
            'minutes': minutes,
            'text': text,
            'user_id': message.from_id,
            'start_time': datetime.datetime.now()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        }

        await asyncio.sleep(minutes * 60)
        if timer_id in timers:
            await message.answer(text)
            timers.pop(timer_id)
        for idx, timer_info in list(timers.items()):
            if idx > timer_id:
                timers[idx - 1] = timers.pop(idx)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞: {e}")

@user.on.message(text=[f'{prefix}—Ç–∞–π–º–µ—Ä—ã' for prefix in prefixes])
async def list_timers(message: Message):
    if not timers:
        await edit_message(message, text="‚åö –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤.")
        return
    response = "‚åö –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤:\n"
    for timer_id, timer_info in timers.items():
        response += f"{timer_id}. {timer_info['text']} -> {timer_info['minutes']} –º–∏–Ω—É—Ç–æ–∫\n"
    await edit_message(message, response)

@user.on.message(text=[f'{prefix}-—Ç–∞–π–º–µ—Ä <timer_id:int>' for prefix in prefixes])
async def remove_timer(message: Message, timer_id: int):
    if message.from_id not in owners:
        return
    global timers, timer_counter
    if timer_id in timers:
        timers.pop(timer_id)
        await edit_message(message, text=f"‚úÖ –¢–∞–π–º–µ—Ä —Å ID ¬´{timer_id}¬ª —É–¥–∞–ª–µ–Ω.")
    else:
        await edit_message(message, text=f"‚ùå –¢–∞–π–º–µ—Ä —Å ID ¬´{timer_id}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    for idx, timer_info in timers.items():
        if idx > timer_id:
            timers[idx - 1] = timers.pop(idx)
    if not timers:
        timer_counter = 0


@user.on.message(text=[f'{prefix}+–¥–æ–≤' for prefix in prefixes])
async def povtoryalka(message: Message):
    if message.from_id not in owners:
        return
    user_id = await user_id_get_mes(message)
    a = await message.get_user(user_ids=user_id)
    name = f'[id{a.id}|{a.first_name} {a.last_name}]'
    if user_id in dov:
        await edit_message(message, f'‚ùå {name} —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö!')
    else:
        dov.append(user_id)
        await edit_message(message, f'‚úÖ {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö!')

@user.on.message(text=[f'{prefix}+–¥–æ–≤ <link>' for prefix in prefixes])
async def povtoryalka(message: Message, link: str):
    if message.from_id not in owners:
        return
    user_id = get_user_id(link)[0]
    a = await message.get_user(user_ids=user_id)
    name = f'[id{a.id}|{a.first_name} {a.last_name}]'
    if user_id in dov:
        await edit_message(message, f'‚ùå {name} —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö!')
    else:
        dov.append(user_id)
        await edit_message(message, f'‚úÖ {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö!')

@user.on.message(text=[f'{prefix}-–¥–æ–≤' for prefix in prefixes])
async def povtoryalka(message: Message):
    if message.from_id not in owners:
        return
    user_id = await user_id_get_mes(message)
    a = await message.get_user(user_ids=user_id)
    name = f'[id{a.id}|{a.first_name} {a.last_name}]'
    if user_id in dov:
        dov.remove(user_id)
        await edit_message(message, f'‚úÖ {name} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö!')
    else:
        await edit_message(message, f"‚ùå {name} –Ω–µ –±—ã–ª –≤ —Å–ø–∏—Å–∫–µ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö!")

@user.on.message(text=[f'{prefix}-–¥–æ–≤ <link>' for prefix in prefixes])
async def povtoryalka(message: Message, link: str):
    if message.from_id not in owners:
        return
    user_id = get_user_id(link)[0]
    a = await message.get_user(user_ids=user_id)
    name = f'[id{a.id}|{a.first_name} {a.last_name}]'
    if user_id in dov:
        dov.remove(user_id)
        await edit_message(message, f'‚úÖ {name} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö!')
    else:
        await edit_message(message, f"‚ùå {name} –Ω–µ –±—ã–ª –≤ —Å–ø–∏—Å–∫–µ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö!")

@user.on.message(text=[f'{prefix}–¥–æ–≤—ã' for prefix in prefixes])
async def dovsspisok(message: Message):
    if message.from_id not in owners:
        return
    if not dov:
        await edit_message(message, '‚ùå –ù–µ—Ç –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!')
    else:
        response = "üìù –°–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        for user_id in dov:
            a = await message.get_user(user_ids=user_id)
            name = f'[id{a.id}|{a.first_name} {a.last_name}]'
            response += f"{name}\n"
        await edit_message(message, response)

@user.on.message(text=[f'{prefix}–∏–≥–Ω–æ—Ä—ã' for prefix in prefixes])
async def show_ignored_users(message: Message):
    if message.from_id not in owners:
        return
    ignored_info = []
    for target_id, ignored in ignored_users.items():
        for user_id in ignored:
            user_info = await user.api.users.get(user_ids=user_id)
            user_name = f"{user_info[0].first_name} {user_info[0].last_name}"
            ignored_info.append(f"[id{user_id}|{user_name}]")

    if ignored_info:
        await edit_message(message, "üìù –°–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n" + "\n".join(ignored_info))
    else:
        await edit_message(message, "‚ùå –°–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")

@user.on.message(text=['/—Å–∫–∞–∂–∏ <text>', '/–°–∫–∞–∂–∏ <text>'])
async def dovtext(message: Message, text: str):
    if message.from_id in dov:
        await message.answer(f'{text}')
    else:
        print('')

@user.on.message(text=[f'{prefix}–∏–Ω—Ñ–æ' for prefix in prefixes])
async def infolp(message: Message):
    if message.from_id not in owners:
        return
    user_id = message.from_id
    a = await message.get_user(user_ids=user_id)
    name = f'[id{a.id}|{a.first_name} {a.last_name}]'
    dov_count = len(dov)
    ignored_count = len(ignored_users)
    timers_count = len(timers)
    with open(TEMPLATES_FILE, 'r') as f:
        templates = json.load(f)
    templates_count = len(templates)
    if prefixes:
        prefixes_list = ", ".join(prefixes)
        prefixes_info = f"üìñ –ü—Ä–µ—Ñ–∏–∫—Å—ã –∫–æ–º–∞–Ω–¥: {prefixes_list}\n"
    else:
      prefixes_info = "‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤\n"
    text = [
        f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name}\n'
        f'‚öô –ü—Ä–µ—Ñ–∏–∫—Å –ø–æ–≤—Ç–æ—Ä—è–ª–∫–∏: /—Å–∫–∞–∂–∏\n'
        f'‚öô –ü—Ä–µ—Ñ–∏–∫—Å —É–¥–∞–ª—è–ª–∫–∏: –î–¥\n'
        f'‚ñ∂ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö: {dov_count}\n'
        f'‚ñ∂ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö: {ignored_count}\n'
        f'‚ñ∂ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–π–º–µ—Ä–æ–≤: {timers_count}\n'
        f'‚ñ∂ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–±–ª–æ–Ω–æ–≤: {templates_count}\n'
        f'{prefixes_info}'
    ]
    await edit_message(message, text)

@user.on.message(text=[f'{prefix}+–∏–≥–Ω–æ—Ä' for prefix in prefixes])
async def add_ignored_user(message: Message):
    if message.from_id not in owners:
        return
    user_id = await user_id_get_mes(message)
    a = await message.get_user(user_ids=user_id)
    name = f'[id{a.id}|{a.first_name} {a.last_name}]'
    target_id = message.from_id
    if user_id == target_id:
        await edit_message(message, "‚ö†Ô∏è –ó–∞—á–µ–º —Ç—ã —Å–µ–±—è –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç –¥–æ–±–∞–≤–ª—è–µ—à—å, —á–µ–ª..")
        return
    if user_id not in ignored_users:
        ignored_users[user_id] = []
    if user_id in ignored_users[user_id]:
        await edit_message(message, f"‚ùå {name} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö.")
    else:
        ignored_users[user_id].append(user_id)
        await edit_message(message, f"‚úÖ {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö.")

@user.on.message(text=[f'{prefix}+–∏–≥–Ω–æ—Ä <link>' for prefix in prefixes])
async def add_ignored_user(message: Message, link: str):
    if message.from_id not in owners:
        return
    user_id = get_user_id(link)[0]
    a = await message.get_user(user_ids=user_id)
    name = f'[id{a.id}|{a.first_name} {a.last_name}]'
    target_id = message.from_id
    if user_id == target_id:
        await edit_message(message, "‚ö†Ô∏è –ó–∞—á–µ–º —Ç—ã —Å–µ–±—è –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç –¥–æ–±–∞–≤–ª—è–µ—à—å, —á–µ–ª..")
        return
    if user_id not in ignored_users:
        ignored_users[user_id] = []
    if user_id in ignored_users[user_id]:
        await edit_message(message, f"‚ùå {name} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö.")
    else:
        ignored_users[user_id].append(user_id)
        await edit_message(message, f"‚úÖ {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö.")

@user.on.message(text=[f'{prefix}-–∏–≥–Ω–æ—Ä' for prefix in prefixes])
async def remove_ignored_user(message: Message):
    if message.from_id not in owners:
        return
    user_id = await user_id_get_mes(message)
    a = await message.get_user(user_ids=user_id)
    name = f'[id{a.id}|{a.first_name} {a.last_name}]'
    target_id = message.from_id
    if user_id == target_id:
        await edit_message(message, "‚ö†Ô∏è –ê –∑–∞—á–µ–º —Å–µ–±—è —É–¥–∞–ª—è—Ç—å —Å –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–∞, –≥–µ–Ω–∏–π?")
        return
    if user_id in ignored_users:
        ignored_users.pop(user_id)
        await edit_message(message, f"‚úÖ {name} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö.")
    else:
        await edit_message(message, f"‚ùå {name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö.")

@user.on.message(text=[f'{prefix}-–∏–≥–Ω–æ—Ä <link>' for prefix in prefixes])
async def remove_ignored_user(message: Message, link: str):
    if message.from_id not in owners:
        return
    user_id = get_user_id(link)[0]
    a = await message.get_user(user_ids=user_id)
    name = f'[id{a.id}|{a.first_name} {a.last_name}]'
    target_id = message.from_id
    if user_id == target_id:
        await edit_message(message, "‚ö†Ô∏è –ê –∑–∞—á–µ–º —Å–µ–±—è —É–¥–∞–ª—è—Ç—å —Å –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–∞, –≥–µ–Ω–∏–π?")
        return
    if user_id in ignored_users:
        ignored_users.pop(user_id)
        await edit_message(message, f"‚úÖ {name} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö.")
    else:
        await edit_message(message, f"‚ùå {name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö.")

@user.on.message(text=['–¥–¥', '–î–¥ <count:int>', '–î–¥', '–¥–¥ <count:int>'])
async def greeting(message: Message, count: int = 2):
    if message.from_id not in owners:
        return
    ct = count + 1
    await message.ctx_api.execute(DD_SCRIPT % (ct,message.peer_id,message.from_id,int(datetime.datetime.now().timestamp())))

@user.on.message() 
async def delete_ignored_messages(message: Message):
    if message.from_id in ignored_users:
        await user.api.messages.delete(message_ids=message.id)

user.run_forever()